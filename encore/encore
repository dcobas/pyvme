#!   /usr/bin/env	python
#    coding: utf8

import sys
import os
import errno
import stat
import datetime
import csv
import cx_Oracle
from os.path import join
from optparse import OptionParser

db_am_translate = {
    2 : 0x39,
    4 : 0x2f,
    5 : 0x29,
    7 : 0x9,
}

register_field_list = [
    'name',
    'rwmode',
    'block',
    'block_address_space',
    'block_offset',
    'register_offset',
    'offset',
    'wordsize',
    'depth',
    'description',
    ]

register_query = '''
select name,
    rwmode,
    block,
    mb.address as block_address_space,
    nvl(mb.offsetval,0) as block_offsetval,
    mr.offsetval as register_offset,
    mr.offsetval + nvl(mb.offsetval,0) as offset,
    wordsize,
    depthval as depth,
    mr.description as description
from moduleregisters mr join moduleblocks mb
    using (block, moduletype_id)
where moduletype_id = (
    select hwtype_id
    from hard_types
    where hwtype = :hwtype )
order by block, block_offsetval, register_offset
'''

module_field_list = [
    'name',
    'description',
    'level',
    'data_width1',
    'data_width2',
    'size1',
    'size2',
    'am1',
    'am2'
]

module_query = '''
select hwtype as name,
    description,
    ilevel,
    initdsize as data_width1,
    nextdsize as data_width2,
    initrangeval as size1,
    nextrangeval as size2,
    initasize as am1,
    nextasize as am2
from hard_types ht
where ht.hwtype = :hwtype
'''

cursor = cx_Oracle.connect(user='copub', password='co').cursor()

def get_register_data(module_name):
    """get a list of dicts containing register attributes"""

    cursor.execute(register_query, hwtype=module_name)

    return [ dict(zip(register_field_list, row)) for row in cursor ]

def get_module_data(module_name):
    """get module data not specific to registers
    """

    import cx_Oracle
    cursor = cx_Oracle.connect(user='copub', password='co').cursor()
    cursor.execute(module_query, hwtype=module_name)

    return [ dict(zip(module_field_list, row)) for row in cursor ]

def gen_plain_file(register_list, filename):
    """given a list of dicts with registers, construct a columnated file"""

    out = open(filename, 'wb')
    for reg in register_list:
        for key in register_field_list:
            out.write('%s\t' % reg[key])
        out.write('\n')
    out.close()

def gen_csv_file(register_list, filename):
    """given a list of dicts with registers, construct a CSV file"""

    out = csv.DictWriter(open(filename, 'wb'), register_field_list)
    for reg in register_list:
        out.writerow(reg)

def gen_register_struct(register_list, module_name):
    """create a C structure definition for this register list"""

    cstruct = ['''
struct encore_reginfo {
	char	name[17];
	char	rwmode[5];
	int	block;
	int	block_address_space;
	int	block_offset;
	int	register_offset;
	int	offset;
	char	wordsize[7];
	int	depth;
	char	description[81];
};

''' ]

    cstruct.append(
    	'\nstruct encore_reginfo %s_registers[] = {\n' % module_name)
    i = 0
    for reg in register_list:
        cstruct.append('    [%d] = {\n' % i)
        cstruct.append('''\
       .name	        	= "%(name)s",
       .rwmode      		= "%(rwmode)s",
       .block       		= %(block)d,
       .block_address_space	= %(block_address_space)d,
       .block_offset		= 0x%(block_offset)x,
       .register_offset		= 0x%(register_offset)x,
       .offset			= 0x%(offset)x,
       .wordsize	    	= "%(wordsize)s",
       .depth       		= 0x%(depth)x,
       .description		= "%(description)s",'''
			       '\n    },\n\n''' % reg )
        i += 1
    cstruct.append('};\n\n')
    cstruct.append(
	'int %s_nregs = '
	'sizeof(%s_registers)/sizeof(%s_registers[0]);\n' % (
		module_name, module_name, module_name))
    return ''.join(cstruct)

def gen_register_struct_file(register_list, module_name, outfile):
    """generate a C file with struct encore definitions"""
    out = file(outfile, 'w')
    out.write(gen_register_struct(register_list, module_name))
    out.close()

def gen_offsets(register_list):
    """generate offset list #define's"""

    define_template = "#define\t%(offset_name)-16s\t0x%(offset)08x\n"

    defines = []
    for register in register_list:
        name = register['name']
        offset = int(register['offset'])
        offset_name = 'OFFSET_%s' % name
        define = define_template % locals()
        defines.append(define)
    return ''.join(defines)

def gen_lib_decls(register_list, prefix="vmeio"):
    """produce declarations for the get/set user lib functions"""
    decl_template = """
int %(driver_name)s_set_%(register_name)s (struct __vsl_device *handle, %(argtype)s value);
int %(driver_name)s_get_%(register_name)s (struct __vsl_device *handle, %(argtype)s *value);"""
    decls = []
    for register in register_list:
        driver_name = prefix
        register_name = register['name']
        argtype = register['wordsize']
        decl = decl_template % locals()
        decls.append(decl)
    return ''.join(decls)

def gen_lib_calls(register_list, prefix="vmeio"):
    """produce code for the get/set user lib functions"""
    call_template = """
int %(driver_name)s_set_%(register_name)s(struct __vsl_device *handle, %(argtype)s value) {
    return usr_raw_write(%(offset_name)s, value);
}

int %(driver_name)s_get_%(register_name)s(struct __vsl_device *handle, %(argtype)s *value) {
    return usr_raw_read(%(offset_name)s, *value);
}
"""
    calls = []
    for register in register_list:
        driver_name = prefix
        register_name = register['name']
        argtype = register['wordsize']
        offset_name = 'OFFSET_%s' % register_name
        call = call_template % locals()
        calls.append(call)
    return ''.join(calls)

def gen_h_file(register_list, libname, filename):
    """produce a lib<module>.h user library header"""
    h_file_header = """#include "vmeio_support.h"\n\n"""

    out = open(filename, 'wb')
    out.write(h_file_header)
    out.write(gen_offsets(register_list))
    out.write('\n')
    out.write(gen_lib_decls(register_list))
    out.close()

def gen_c_file(register_list, libname, filename):
    """produce a lib<module>.c user library module"""
    c_file_header = """#include "%s.h"\n\n""" % libname

    out = open(filename, 'wb')
    out.write(c_file_header)
    out.write(gen_lib_calls(register_list))
    out.close()

def gen_regs(register_list, module_name):

    rwmode_translate = {
        "rw"	: "RW",
        "rc"	: "RO",
        "rc"	: "RO",
        "r"	    : "RO",
        "w" 	: "RW",
        "rw"	: "RW",
        "e"     : "WO",
        "rc"	: "RO",
        "rwc"	: "RW",
    }

    size_translate = {
        'long'  : 4,
        'short' : 2,
        'char'  : 1,
    }

    row_template = ( "$\t%(register_name)-16s\t%(rwflags)2s\t"
            "0x%(offset)08X\t%(size)d\t%(window)d\t%(depth)s\n")
    regs = []
    for register in register_list:
        register_name = register['name']
        rwflags = rwmode_translate[register['rwmode']]
        offset = int(register['offset'])
        size = int(size_translate[register['wordsize']])
        window = 1
        depth = int(register['depth'])
        row = row_template % locals()
        regs.append(row)
    return ''.join(regs)

def gen_regs_file(register_list, module_name):
    """produce a .regs file"""

    name = module_name.upper()
    header = """NAME %s

  RegName		RwFlags	Offset		Size	Window	Depth

""" % name

    upper_name = name.upper()
    out = open(upper_name+'.regs', 'wb')
    out.write(header)
    out.write(gen_regs(register_list, upper_name))
    out.close()

def gen_makefile(driver_name, module_name, filename):
    """produce a Makefile for the library"""

    makefile_template = """\
# generated automatically by encore, date %(date)s

CPU=L865
KVER=2.6.24.7-rt27
KERNELSRC=/acc/sys/$(CPU)/usr/src/kernels/$(KVER)
include /acc/dsc/src/co/Make.auto

DRIVER = %(driver_name)s
DRIVER_NAME = "$(DRIVER)"
LIBNAME = lib$(DRIVER)

COMPILE_TIME = $(shell date +%%s)
CFLAGS= -g -Wall -I. -I ../../driver
CFLAGS += -I /acc/local/$(CPU)/include/
CFLAGS += -DCOMPILE_TIME=$(COMPILE_TIME) -g -Wall -fPIC

MODLIBS = $(LIBNAME).$(CPU).a $(LIBNAME).$(CPU).so
VMELIBS = vmeio_support.$(CPU).so vmeio_support.$(CPU).a libencore.$(CPU).o

SRCS=$(LIBNAME).c $(LIBNAME).h

all: modules libs
libs: $(MODLIBS) $(VMELIBS)
modules:
	cp Module.symvers.vmebus Module.symvers
	make -C $(KERNELSRC) M=`pwd` KVER=$(KVER) 'DRIVER_NAME=$(DRIVER_NAME)' modules
clean:
	rm -f *.o *.a *.so
	make -C $(KERNELSRC) M=`pwd` clean

$(LIBNAME).$(CPU).o: $(SRCS)

$(LIBNAME).$(CPU).a: $(LIBNAME).$(CPU).o
	-$(RM) $@
	$(AR) $(ARFLAGS) $@ $^
	$(RANLIB) $@

$(LIBNAME).$(CPU).so: $(LIBNAME).$(CPU).o
	-$(RM) $@
	$(CC) $(CFLAGS) -o $@ -shared $^

lib$(DRIVER).$(CPU).so: lib$(DRIVER).$(CPU).o
	$(CC) -shared -o $@ $^

vmeio_support.$(CPU).so: vmeio_support.$(CPU).o
	-$(RM) $@
	$(CC) $(CFLAGS) -o $@ -shared $^

vmeio_support.$(CPU).a: vmeio_support.$(CPU).o
	-$(RM) $@
	$(AR) $(ARFLAGS) $@ $^
	$(RANLIB) $@

libencore.$(CPU).a: libencore.$(CPU).o
	-$(RM) $@
	$(AR) $(ARFLAGS) $@ $^
	$(RANLIB) $@
"""

    date = datetime.datetime.now().isoformat(' ')
    makefile = makefile_template % locals()
    out = open(filename, 'wb')
    out.write(makefile)
    out.close()

def gen_kbuild(driver_name, module_name, filename):
    """produce a Kbuild for the driver"""

    kbuild_template = """\
# generated automatically by encore, date %(date)s

EXTRA_CFLAGS += -DCOMPILE_TIME=$(shell date +%%s) -g -Wall \\
	'-DDRIVER_NAME=$(DRIVER_NAME)' \\
	-I/acc/src/dsc/drivers/vmebridge/driver

obj-m := %(driver_name)s.o
"""

    date = datetime.datetime.now().isoformat(' ')
    kbuild = kbuild_template % locals()
    out = open(filename, 'wb')
    out.write(kbuild)
    out.close()

def gen_install_script(device_name, driver_name,
	output_file, transfer='/etc/transfer.ref'):

    instprog_template = r'''#!/bin/sh

# Generated automatically by install.py at %(date)s"
echo "Installing %(device_name)s driver..."

INSMOD_ARGS=`awk -f transfer2insmod.awk %(device_name)s %(transfer)s`

if [ x"$INSMOD_ARGS" == x"luns=" ] ; then
    echo "No %(device_name)s declared in %(transfer)s, exiting"
    exit 1
fi

echo "installing %(driver_name)s by insmod $INSMOD_ARGS"
insmod %(driver_name)s.ko "$INSMOD_ARGS"

MAJOR=`cat /proc/devices | awk '$2 == "%(driver_name)s" {print $1}' %(transfer)s`
if [ -z "$MAJOR" ]; then
	echo "driver %(driver_name)s not installed!"
	exit 1
fi

MINORS=`awk '/^#+#/ && $6 == "%(device_name)s" { print $7, }' %(transfer)s`
echo "creating device nodes for driver %(driver_name)s, major $MAJOR, minors $MINORS"
for MINOR in $MINORS; do
    rm -f /dev/%(driver_name)s.$MINOR
    mknod /dev/%(driver_name)s.$MINOR c $MAJOR $MINOR
done
'''

    date = datetime.datetime.now().isoformat(' ')

    out = file(output_file, 'w')
    out.write(instprog_template % locals())
    out.close()

def make_out_dir(dirname, kill=False):
    try:
        isdir = stat.S_ISDIR(os.stat(dirname).st_mode)
        if not kill and raw_input(dirname +
                ' already exists, remove? (y/N) ') != 'y':
            return -errno.ENOENT

        for root, dirs, files in os.walk(dirname, topdown=False):
            for name in files:
                os.remove(os.path.join(root, name))
            for name in dirs:
                os.rmdir(os.path.join(root, name))
        os.rmdir(dirname)
        return os.mkdir(dirname)
    except OSError:
        return os.mkdir(dirname)

def main():

    # option processing
    usage = 'usage: dbexctract.py [options] MODULE_NAME'

    parser = OptionParser(usage=usage)
    parser.add_option("--plain", dest="plain", action="store",
                        help="create a plaintext file with register data",
                        metavar="FILE")
    parser.add_option("--regs", action="store_true", dest="regs",
                        help="create a .regs file for encore v1.0 compat",
                        metavar="FILE")
    parser.add_option("-q", "--quiet",
                      action="store_false", dest="verbose", default=True,
                      help="don't print status messages to stdout")
    parser.add_option("-k", "--kill",
                      action="store_true", dest="kill", default=False,
                      help="kill destination directory if it exists")
    (options, args) = parser.parse_args(sys.argv)

    # only positional parameter, module name
    if len(args) != 2:
        parser.print_help()
        sys.exit(1)
    module_name = args[1].upper()

    # prepare output paths
    driver_name   = module_name.lower()
    output_dir    = driver_name
    libname       = 'lib%s' % driver_name
    lib_h         = join(output_dir, libname + '.h')
    lib_c         = join(output_dir, libname + '.c')
    makefile      = join(output_dir, 'Makefile')
    kbuild        = join(output_dir, 'Kbuild')
    regs_csv      = join(output_dir, driver_name + '.csv')
    regs_c	  = join(output_dir, driver_name + '_regs.c')
    install_sh	  = join(output_dir, 'install_' + driver_name + '.sh')

    if make_out_dir(output_dir, options.kill):
        print 'could not make output dir ' + output_dir
        sys.exit(1)

    register_list = get_register_data(module_name)
    module_data   = get_module_data(module_name)
    if not register_list:
        print 'no data for module %s in CCDB, exiting' % module_name
        sys.exit(1)

    # driver fileset generation
    gen_csv_file(register_list, regs_csv)
    gen_register_struct_file(register_list, driver_name, regs_c)
    gen_h_file(register_list, libname, lib_h)
    gen_c_file(register_list, libname, lib_c)
    gen_makefile(driver_name, module_name, makefile)
    gen_kbuild(driver_name, module_name, kbuild)
    gen_install_script(module_name, driver_name, install_sh)

    # copy verbatim files
    cwd = os.path.dirname(sys.argv[0])
    templates_dir = os.path.joing(cwd, 'templates')
    verbatim_files = [
        'vmeio.c',
        'vmeio.h',
        'Module.symvers.vmebus',
        'libencore.c',
        'libencore.h',
        'vmeio_support.c',
        'vmeio_support.h',
    ]
    for f in verbatim_files:
        from_ = os.path.join(templates_dir, f)
        to    = os.path.join(output_dir, f)
        if f == 'vmeio.c':
            to = os.path.join(output_dir, driver_name + '.c')
	os.system('cp "%s" "%s"' % (from_, to))


    # optional data files generation
    registers = dict([ (regdata['name'], regdata)
                        for regdata in register_list ])
    if options.plain:
        plain_filename =join(output_dir, options.plain)
        gen_plain_file(register_list, plain_filename)
    if options.regs:
        regs_filename = join(output_dir, module_name)
        gen_regs_file(register_list, regs_filename)


if __name__ == '__main__':

    main()

