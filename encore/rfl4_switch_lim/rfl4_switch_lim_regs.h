#ifndef _RFL4_SWITCH_LIM_REGS_H
#define _RFL4_SWITCH_LIM_REGS_H

#ifdef __cplusplus
extern "C" {
#endif

/* struct encore_reginfo definition needed */

extern struct encore_reginfo rfl4_switch_lim_registers[];
extern int rfl4_switch_lim_nregs;

enum rfl4_switch_lim_register_id {
	control1,
	vmeIRQStatID,
	vmeIRQLevel,
	status1,
	ident,
	faults1,
	overflow1,
	pmAddr,
	obsAddr,
	memStatus,
	memControl1,
	memControl2,
	memControl3,
	nvMemStatus,
	nvMemControl,
	nvMemGetKey,
	nvMemSetKey,
	nvMemCRCVal,
	rfLimitingLevel,
	rfGainLevel,
	fbSetPoint,
	rfLimitingDelay,
	loPwrMax,
	loPwrMin,
	inputsControl,
	irqControl,
	vetoStatus,
	vetoControl,
	status2,
	clockStatus,
	diagInPwr,
	diagOutPwr,
	diagInPhase,
	diagOutPhase,
	frevAdjDiagIn,
	frevAdjDiagOut,
	frevAdjH,
	adcTestControl,
	adcTestStatus,
	dac1Cal,
	dac2Cal,
	dac3Cal,
	adclkFreqMax,
	adclkFreqMin,
	frevDetector,
	fcDetector,
	loPwr,
	uP1V2,
	uP1V8,
	uP2V5,
	uP3V3,
	uP1V8A,
	uP5VA,
	uP8V,
	uM3V3,
	uM5VA,
	uP3V3D,
	uP5V,
	uP12V,
	uM12V,
	uP12VA,
	uM12VA,
	uP6VA,
	uM6VA,
	obsEvntCycleTime,
	pmEvntCycleTime,
	cycleTimeControl,
	timingSel1,
	refPhase,
	pmObsFrzTrigger,
	rfFreq,
	rfFreqMax,
	rfFreqMin,
	fcAdjH,
	adcTestData,
	sysControl,
	hardwareVersion,
	designerID,
	boardTemp,
	chipTemp,
	testControl,
	testStatus,
	firmwareVersion,
	serialNumber,
	memMapVersion,
	diagInGain,
	diagInOffset,
	diagOutGain,
	diagOutOffset,
	dac1Gain,
	dac1Offset,
	dac2Gain,
	dac2Offset,
	dac3Gain,
	dac3Offset,
	dac1Gain2,
	dac1Offset2,
	powerDetVTAdj,
	testMem,
	VECTOR,
	LEVEL,
	memViewport,

};

#ifdef __cplusplus
}
#endif
#endif /* _RFL4_SWITCH_LIM_REGS_H */
